CORRER ARTISAN MIGRATE

CLASE 34:
  Para un gestor de tareas hacen falta una tabla en la que queden almacenadas las tareas y otra para
  guardar los usuarios

CLASE 35:
  para mantener la sesión se pasa en el array de autenticación true. La casilla de verificación
  devuelce true si está marcada

CLASE 36:
  Para recoger datos podemos usar el generador de modelos, que no pasa por el modelo. Sin embargo
  lo ideal es usar el modelo(ORM) eloquent, que es una herramienta que permite realizar todo tipo de
  consulta. Simplemente hace falta usar el nombre del modelo y el método adecuado.
    $tareas = Task::where('user_id', '=', Auth::id())->get();
  con esta consulta se comprueba que el id usuario sea igual al del usuario identificado.


CLASE 39:
  La paginación de laravel se basa en el valor pagination del archivo view.php contenido en la carpeta config. Este valor pagination
  tiene dos valores por defecto: slider, que muestra un rango inteligente de enlaces basados en la pagina actual, aparecen los números de
  página con enlaces, y simple que solo tiene los botones anterior y siguiente.
  Para paginar, se usa el metodo ->paginate(nº de elementos) en lugar del get en el generador de consultas al llamar a la base de datos.
  Estos datos se recogen en el controlador y se tienen que enviar a la vista . Para ello se usa el método ->links().
  Si se usa la paginación simple existe la opcion de utilizar el método ->simplePaginate() para hacer una consulta mas eficiente.
  Se pueden modificar las urls de los elementos del paginador.
  Para poner parámetros opcionales , para ello se añade una interrogación al final del nombre. Hay que asignarles un valor al llamar al método

CLASE 40:
  Para enviar e-mails en laravel existe una clase específica. El envío de e-mails en laravel se basa en SwiftMailer (libreria PHP).

CLASE 41:
  Para internacionalizar una aplicación laravel se usa la clase lang. Esta clase permite cambiar
  entre cadenas guardadas en los distintos archivos de idiomas. El archivo de idioma tiene un bloque
  de php y un array asociativo de pares clave-valor con la palabra clave y el texto correspondiente
  en el idioma correspondiente.
  Para cambiar el idioma en tiempo de ejecución se usa App::locale('idioma'). El idioma se puede
  guardar con una cookie. Esta cookie hay que leerla y aplicarla siempre que se realiza una petición.
  Para esto se usa el archivo filters.php, que contiene el filtro App::before, que ejecuta todo lo que
  contiene.
  Otra manera de cambiar el idioma es con variables de sesion

CLASE 42:
  Para validar datos se usa la clase Validator a la que se le pasan  arrays como parámetros. El primero es un array asociativo que contiene en el indice
  el nombre de un campo y su valor, en este caso se puede usar por ejemplo Input::all para recoger todos los datos del forumlaria. El segundo array muestra
  el indice tambien tiene un nombre de un campo junto con las validaciones que queremos aplicar y el tercero incluye los mensajes de error

CLASE 43:
  El controlador de registros de la aplicacion esta en el archivo global.php de la carpeta start. Por defecto el logger está configurado para
  usar un único archivo de registro. Se pueden crear otros controladores de registros. Para escuchar errores fatales se puede usar el metodo
  App::fatal.
  Si hay muchos controladores de excepcion hay que definirlos del más generico al más específico.

CLASE 44: Petición y entradas de datos, y Cookies
  Se pueden recoger datos de inputs de usuario con Input::get();. Se le puede asignar un valor por defecto Input::get('input', 'valor por defecto')
  Para determinar si una entrada tiene valor se usa Input::get('input'). Para obtener todos los valores de todos los inputs se usa Input::all
  Se pueden recoger parámetros determinados con Input::only() y podemos recoger todos los campos exceptuando algunos con Input::except();
  Cuando se trabaja con formularios que tienen un array se utiliza la notación de puntos para acceder a los elementos del array (producto.0.name)
  Los datos enviados en formato JSON también pueden ser recogidos con Input::get();
  Todas las cookies creadas por el framework laravel están encriptadas y firmadas con código de autenticación. Para recuperar el valor de una
  cookie se usa Cookie::get('nombre de cookie');. Se puede adjuntar una nueva cookie a una respuesta se usa
  $response->withCookie(Cookie::make('nombre', 'valor', $minutes)). Se puede dejar una cookie en cola para que se adjunte mas adelante.
  Se puede crear una cookie que no caduque, con Cookie::forever('name', 'value');.
  Se pueden guardar datos de una respuesta hasta la próxima respuesta. Por ejemplo puedes querer poblar un formulario después de buscar errores de
  validación 
