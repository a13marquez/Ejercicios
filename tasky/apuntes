CORRER ARTISAN MIGRATE

CLASE 34:
  Para un gestor de tareas hacen falta una tabla en la que queden almacenadas las tareas y otra para
  guardar los usuarios

CLASE 35:
  para mantener la sesión se pasa en el array de autenticación true. La casilla de verificación
  devuelce true si está marcada

CLASE 36:
  Para recoger datos podemos usar el generador de modelos, que no pasa por el modelo. Sin embargo
  lo ideal es usar el modelo(ORM) eloquent, que es una herramienta que permite realizar todo tipo de
  consulta. Simplemente hace falta usar el nombre del modelo y el método adecuado.
    $tareas = Task::where('user_id', '=', Auth::id())->get();
  con esta consulta se comprueba que el id usuario sea igual al del usuario identificado.


CLASE 39:
  La paginación de laravel se basa en el valor pagination del archivo view.php contenido en la carpeta config. Este valor pagination
  tiene dos valores por defecto: slider, que muestra un rango inteligente de enlaces basados en la pagina actual, aparecen los números de
  página con enlaces, y simple que solo tiene los botones anterior y siguiente.
  Para paginar, se usa el metodo ->paginate(nº de elementos) en lugar del get en el generador de consultas al llamar a la base de datos.
  Estos datos se recogen en el controlador y se tienen que enviar a la vista . Para ello se usa el método ->links().
  Si se usa la paginación simple existe la opcion de utilizar el método ->simplePaginate() para hacer una consulta mas eficiente.
  Se pueden modificar las urls de los elementos del paginador.
  Para poner parámetros opcionales , para ello se añade una interrogación al final del nombre. Hay que asignarles un valor al llamar al método

CLASE 40:
  Para enviar e-mails en laravel existe una clase específica. El envío de e-mails en laravel se basa en SwiftMailer (libreria PHP).

CLASE 41:
  Para internacionalizar una aplicación laravel se usa la clase lang. Esta clase permite cambiar
  entre cadenas guardadas en los distintos archivos de idiomas. El archivo de idioma tiene un bloque
  de php y un array asociativo de pares clave-valor con la palabra clave y el texto correspondiente
  en el idioma correspondiente.
  Para cambiar el idioma en tiempo de ejecución se usa App::locale('idioma'). El idioma se puede
  guardar con una cookie. Esta cookie hay que leerla y aplicarla siempre que se realiza una petición.
  Para esto se usa el archivo filters.php, que contiene el filtro App::before, que ejecuta todo lo que
  contiene.
  Otra manera de cambiar el idioma es con variables de sesion

CLASE 42:
  Para validar datos se usa la clase Validator a la que se le pasan  arrays como parámetros. El primero es un array asociativo que contiene en el indice
  el nombre de un campo y su valor, en este caso se puede usar por ejemplo Input::all para recoger todos los datos del forumlaria. El segundo array muestra
  el indice tambien tiene un nombre de un campo junto con las validaciones que queremos aplicar y el tercero incluye los mensajes de error

CLASE 43:
  El controlador de registros de la aplicacion esta en el archivo global.php de la carpeta start. Por defecto el logger está configurado para
  usar un único archivo de registro. Se pueden crear otros controladores de registros. Para escuchar errores fatales se puede usar el metodo
  App::fatal.
  Si hay muchos controladores de excepcion hay que definirlos del más generico al más específico.

CLASE 44: Petición y entradas de datos, y Cookies
  Se pueden recoger datos de inputs de usuario con Input::get();. Se le puede asignar un valor por defecto Input::get('input', 'valor por defecto')
  Para determinar si una entrada tiene valor se usa Input::get('input'). Para obtener todos los valores de todos los inputs se usa Input::all
  Se pueden recoger parámetros determinados con Input::only() y podemos recoger todos los campos exceptuando algunos con Input::except();
  Cuando se trabaja con formularios que tienen un array se utiliza la notación de puntos para acceder a los elementos del array (producto.0.name)
  Los datos enviados en formato JSON también pueden ser recogidos con Input::get();
  Todas las cookies creadas por el framework laravel están encriptadas y firmadas con código de autenticación. Para recuperar el valor de una
  cookie se usa Cookie::get('nombre de cookie');. Se puede adjuntar una nueva cookie a una respuesta se usa
  $response->withCookie(Cookie::make('nombre', 'valor', $minutes)). Se puede dejar una cookie en cola para que se adjunte mas adelante.
  Se puede crear una cookie que no caduque, con Cookie::forever('name', 'value');.
  Se pueden guardar datos de una respuesta hasta la próxima respuesta. Por ejemplo puedes querer poblar un formulario después de buscar errores de
  validación

CLASE 45: Configuración y manejo de caché en el servidor
  La caché es una memoria que se utiliza para almacenar temporalmente determinados contenidos para acelerar su función o carga en el futuro.
  En el lado de servidor la caché almacena temporalmente algunos contenidos para no tener que generarlos de nuevo antes de enviarlos. Si utilizamos
  la memoria caché para guardar partes que se ejecuten constantemente, mejoraremos el rendimiento de la página.
  La configuracion del cache se encuentra en app/config/cache.php. En este archivo se puede especificar el controlador de cache. Laravel incorpora
  Memcached y Redis.
  Con el método Cache::put('clave', 'valor', $minutos) se pueden almacenar datos en cache. La caché se puede usar para no crear variables de sesión,
  como por ejemplo para guardar los datos de un usuario traidos de la base de datos.
  La memoria caché comprueba el valor almacenado antes de usarlo. Si el valor ha cambiado o ha expirado se genera de nuevo, si no ha cambiado se
  usa el de la caché. Con Carbon se gestiona el tiempo en laravel, usando Carbon::now() se obtienen la fecha y hora actuales
  También se puede usar el método Cache::add('clave', 'valor', $minutos) para añadir a la cache, este método devuelve true si se añade el elemento
  al cache.
  Usando Cache::has() se puede comprobar si un elemento está en la caché y usando Cache::get('clave') se recoge un valor de la caché.
  Usando el método Cache::remember('clave', function(){}) puedes recuperar un elemento de la caché, pero si el elemento no existe guardar un
  valor por defecto, por ejemplo
  $valor = Cache::remember('usuarios', $minutos, function(){
    return DB:table('users')->get();
  })
  Esta función trae el valor de la clave usuarios y si este no existe almacena por defecto los usuarios de la tabla usuarios de la base de datos.
  Todos los elementos en la caché están serializado, por lo que se puede almacenar cualquier tipo de datos.
  Usando Cache::pull('clave') se recupera el valor de la cache y después se elimina.
  Las etiquetas de cache permiten etiquetar elementos relacionados y eliminarlos todos al eliminar la clave
  Cache::tags('etiqueta1', 'etiqueta2')->put('clave', valor, $minutos). Con esto se pueden recoger datos de una etiqueta u otra.
  Si se usa Cache::tag('etiqueta1')->flush() elimina todos los elementos con la etiqueta1, aunque estos elementos tengan otras etiquetas asignadas.
  Cuando se usa el controlador de cache database hay que configurar una tabla con la llave, el valor y la caducidad. Habria que crear una migración
  para crear esa tabla.

CLASE 46: Funciones auxiliares (helpers)
  Son funciones que contiene un framework que facilitan la programación. Existen funciones auxiliares para arrays, rutas, cadenas, URLs y miscelaneos

CLASE 47: Relaciones entre los modelos del proyecto
  Hay seis tipos de relaciones de bases de datos. Las más usadas son one to one, one to many y many to many.
  La relación uno a uno es muy básica. Un elemento de una tabla se relaciona con un elemento de otra tabla. Para crear este tipo de relacion se usa:
  class User extends Eloquent
  {
    public function phone()
      {
        return $this->hasOne('Phone');
      }
  }
  Para recuperar el objeto de la relación se usa:
  $phone = User::find(1)-phone;
  También hay que crear la relación inversa, por tanto en la clase phone hay que crear:
  class Phone extends Eloquent
  {
    public function user()
      {
        return $this->belongTo('User');
      }
  }

  La relación más común es la relación uno a muchos, un elemento de un lado se puede relacionar con varios elementos del otro lado, por ejemplo
  en un blog un post puede tener muchos comentarios (1-n), pero un comentario solo pertenece a un post (1-1).

  La relacion many to many implica que un  un elemento de un lado se puede relacionar con varios elementos del otro lado, para crear esta relacion
  hacen falta 3 tablas, por ejemplo alumnos y cursos. Un alumno puede estar en muchos cursos, un curso puede tener muchos alumnos, hacen falta
  una tabla alumnos, una tabla cursos y una tabla alumno_curso
